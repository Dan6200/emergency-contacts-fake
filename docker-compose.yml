version: "3.8"
services:
  app:
    image: danielnyong/emergency-contacts-print-qr:latest
    ports:
      - "3000:3000"
    depends_on:
      - redis
    env_file: ~/app/.env
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - ~/redis-config/redis.conf:/usr/local/etc/redis/redis.conf
      - /var/lib/redis:/var/lib/redis
      - ~/redis/redis-server.log:/var/log/redis/redis-server.log
    # Override the default command to start redis with own configuration
    command: sh -c "redis-server /usr/local/etc/redis/redis.conf && tail -f /var/log/redis/redis-server.log"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on: [webserver]
    # To create the ssl certificate:
    # command: certonly --webroot --webroot-path=/var/www/html --email danielnyong66@gmail.com --agree-tos --no-eff-email --noninteractive --force-renewal -d linkid.sbs
    # Use the staging flag to avoid rate-limiting
    # command: certonly --webroot --webroot-path=/var/www/html --email danielnyong66@gmail.com --agree-tos --no-eff-email --noninteractive --staging -d linkid.sbs
    # To renew every 12 hrs:
    entrypoint: /bin/sh -c 'trap "exit 0" TERM; while :; do certbot renew; sleep 12h; done'

  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - web-root:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on: [app]
    networks: [app-network]

volumes:
  certbot-etc:
  certbot-var:
  web-root:
    driver: local

networks:
  app-network:
    driver: bridge
